{"ast":null,"code":"var _jsxFileName = \"/data/data/com.termux/files/home/breakingbad/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Header from './components/ui/Header';\nimport Search from './components/ui/Search';\nimport CharactersGrid from './components/characters/CharactersGrid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [items, setItems] = useState([]);\n  const [isloading, setIsLoading] = useState(true); //state for search elements\n\n  const [query, setQuery] = useState('');\n  useEffect(() => {\n    const fetchItems = async () => {\n      const result = await axios(`https://www.breakingbadapi.com/api/characters?name=${query}`);\n      setItems(result.data);\n      setIsLoading(false);\n    };\n\n    fetchItems();\n  }, [query]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Search, {\n      getQuery: q => setQuery(q)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), isloading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"loading \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 20\n    }, this) : /*#__PURE__*/_jsxDEV(CharactersGrid, {\n      items: items,\n      isloading: isloading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 39\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"IBnU/QHrx02Ldlmx2IgCByHl9ek=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/data/data/com.termux/files/home/breakingbad/src/App.js"],"names":["React","useState","useEffect","axios","Header","Search","CharactersGrid","App","items","setItems","isloading","setIsLoading","query","setQuery","fetchItems","result","data","q"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,cAAP,MAA2B,wCAA3B;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAK,CAACC,KAAD,EAAOC,QAAP,IAAmBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAK,CAACS,SAAD,EAAWC,YAAX,IAA2BV,QAAQ,CAAC,IAAD,CAAxC,CAFa,CAGb;;AACA,QAAK,CAACW,KAAD,EAAOC,QAAP,IAAmBZ,QAAQ,CAAC,EAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAI;AACZ,UAAMY,UAAU,GAAG,YAAY;AAC7B,YAAMC,MAAM,GAAG,MAAMZ,KAAK,CAAE,sDAAqDS,KAAM,EAA7D,CAA1B;AAEAH,MAAAA,QAAQ,CAACM,MAAM,CAACC,IAAR,CAAR;AACAL,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KALD;;AAMAG,IAAAA,UAAU;AACX,GARQ,EAQP,CAACF,KAAD,CARO,CAAT;AAUA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AAAQ,MAAA,QAAQ,EAAGK,CAAD,IAAKJ,QAAQ,CAACI,CAAD;AAA/B;AAAA;AAAA;AAAA;AAAA,YAFF,EAGIP,SAAS,gBAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAF,gBAAqB,QAAC,cAAD;AAAgB,MAAA,KAAK,EAAEF,KAAvB;AAA8B,MAAA,SAAS,EAAEE;AAAzC;AAAA;AAAA;AAAA;AAAA,YAHlC;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAvBQH,G;;KAAAA,G;AAyBT,eAAeA,GAAf","sourcesContent":["import React,{ useState,useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Header from './components/ui/Header';\nimport Search from './components/ui/Search';\nimport CharactersGrid from './components/characters/CharactersGrid';\n\nfunction App() {\n  const[items,setItems] = useState([]);\n  const[isloading,setIsLoading] = useState(true);\n  //state for search elements\n  const[query,setQuery] = useState('');\n  \n  useEffect(()=>{\n    const fetchItems = async () => {\n      const result = await axios(`https://www.breakingbadapi.com/api/characters?name=${query}`);\n      \n      setItems(result.data);\n      setIsLoading(false);\n    }\n    fetchItems();\n  },[query]);\n  \n  return (\n    <div className=\"container\">\n      <Header />\n      <Search getQuery={(q)=>setQuery(q)} />\n      { isloading? <h1>loading </h1> :<CharactersGrid items={items} isloading={isloading} />}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}